/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//  The steps to solve the problem are as follows:

// Create a map to store the frequency of each subtree and a vector to store the duplicate subtrees.
// Traverse the binary tree using a post-order traversal. For each subtree, serialize its left and right children recursively and append its own value to create a unique string representation of the subtree.
// Add the serialized subtree to the map and update its frequency. If the frequency of the serialized subtree is equal to 1, add the root node of the subtree to the vector of duplicate subtrees.
// Return the vector of duplicate subtrees.
class Solution {
public:
    unordered_map<string,int>mp;

    string solve(TreeNode *root,vector<TreeNode *>&res){
        if(!root) return "#"; //#represent null string

        string left = solve(root->left,res);
        string right = solve(root->right,res);
        //postorder traversal
        string curr = left + "," + right + "," + to_string(root->val); 

        if(mp[curr] == 1){
            res.push_back(root);
        }
        mp[curr]++;
        return curr;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        vector<TreeNode *>ans;
        solve(root,ans);
        return ans;
        
    }
};
