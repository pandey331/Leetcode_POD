/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        if(root==nullptr) return true;
        
        queue<TreeNode*>q;
        q.push(root);
        // while(q.front() != nullptr)
        // {
        //     //remove current node from queue

        //     TreeNode* curr=q.front();
        //     q.pop();
        //     //push left and right node of curr node
        //     q.push(curr->left);
        //     q.push(curr->right);
        // }
        //     //check if q is not empty and any nullptr exists remove from queue
        //     while(!q.empty() && q.front() == nullptr){ q.pop();
            
        // }
        // ///check tree is complete or not 
        // //if any element left in queue return false
        // //if tree is complete return true
        // return q.empty();
        bool gotnull=false;
        while(!q.empty())
        {
            TreeNode* curr = q.front();
            q.pop();

            if(curr==nullptr) gotnull = true;
            else{
                if(gotnull==true) return false;
                q.push(curr->left);
                q.push(curr->right);
            }

        }
        return true;

        
    }
};
