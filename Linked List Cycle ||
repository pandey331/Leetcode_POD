/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //USING FAST AND SLOW POINTER
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *fast,*slow;
        slow=head;
        fast=head;
        while(fast!=NULL && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(fast==slow)  break;      
        }
        if(!fast || !fast->next) return NULL;
        // If the pointers meet, there is a cycle in the linked list.
        // Reset the slow pointer to the head of the linked list, and move
        // both pointers one step at a time
        // until they meet again. The node where they meet is the starting point of the cycle.
        if(fast==slow)
        {
            slow=head;
            while(fast!=slow){
            fast=fast->next;
            slow=slow->next;
            }
        }
        return slow;
        
    }
};
