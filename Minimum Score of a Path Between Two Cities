class Solution {
public:
    int minScore(int n, vector<vector<int>>& roads) {
       //storing in adjacency list because graph may be disconnected
       vector<vector<int>>adj[n+1];
       for(auto it:roads)
       {
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
       }
       //using bfs approach
       vector<int>vis(n+1,0);
       vis[1]=1;
       queue<int>q;
       q.push(1);
       while(!q.empty())
       {
           int node = q.front();
           q.pop();
           for(auto it:adj[node])
           {
               if(!vis[it[0]])
               {
                   vis[it[0]]=1;
                   q.push(it[0]);
               }
           }
       }
       int ans = INT_MAX;
       for(int i=0;i<roads.size();i++)
       {
           if(vis[roads[i][0]] && vis[roads[i][1]])
           {
               ans = min(ans,roads[i][2]);
           }
       }
       return ans;
        
    }
};
