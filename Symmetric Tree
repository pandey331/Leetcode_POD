/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
////recursive solution
//  bool issymetriccheck(TreeNode* leftnode,TreeNode* rightnode)
//      {
//          
//         if(leftnode==nullptr && rightnode==nullptr) return true;
//         if(leftnode==nullptr || rightnode==nullptr || 
//         leftnode->val != rightnode->val) return false;
//         return issymetriccheck(leftnode->left,rightnode->right)
//         && issymetriccheck(leftnode->right,rightnode->left);

//      }
//     bool isSymmetric(TreeNode* root) {
//         //base case
//      if(root==nullptr) return true;
//      //recursive calls for left and right child
//      return issymetriccheck(root->left,root->right);
//     }
//ITERATIVE SOLUTION
//using bfs queue

    bool isSymmetric(TreeNode* root) {
         if(root==nullptr) return true;
           queue<TreeNode*>q;
           q.push(root->left);
           q.push(root->right);
           while(!q.empty())
           {
               TreeNode*leftnode=q.front();
               q.pop();
               TreeNode*rightnode=q.front();
               q.pop();
               if(leftnode==nullptr && rightnode==nullptr)  continue;
               if(leftnode==nullptr || rightnode==nullptr || 
               leftnode->val != rightnode->val) return false;
               q.push(leftnode->left);
               q.push(rightnode->right);
               q.push(leftnode->right);
               q.push(rightnode->left);
               
            }
            return true;
    }
};
