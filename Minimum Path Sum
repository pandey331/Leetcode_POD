class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
//dp[0][0] = grid[0][0] since the minimum path sum to the top-left corner 
//is the value of the top-left cell.
// For the first row i=0 and first column j=0 < j < n,
// the minimum path sum can only be reached by moving right or down from the previous cell. So, ///we can compute dp[0][j] = dp[0][j-1] + grid[0][j] and
// dp[i][0] = dp[i-1][0] + grid[i][0] respectively.
// For the rest of the cells, we can compute the minimum path sum as follows:
// dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]) 
//since we can reach the current cell from the cell 
//above or the cell to the left, and we want to take the path with the minimum sum.
// Once we have filled the dp array, the minimum path 
//sum to the bottom-right corner will be dp[m-1][n-1], where m is the number of rows and n is ////the number of columns of the input grid.
// The time complexity of this approach is O(mn) since we visit each cell once.
        int n=grid.size();
        int m=grid[0].size();
        // for(int i=0;i<n;i++)
        // {
        //     for(int j=0;j<m;j++)
        //     {
        //         if(i==0 &&j!=0) grid[i][j]+=grid[i][j-1];
        //         if(i!=0 && j==0)grid[i][j]+=grid[i-1][j];
        //         if(i!=0 && j!=0) grid[i][j]+=min(grid[i][j-1],grid[i-1][j]);
        //     }
        // }
        vector<vector<int>>dp(n,vector<int>(m,0));
        dp[0][0]=grid[0][0];
        for(int i=1;i<n;i++)
        {
            dp[i][0]=dp[i-1][0]+grid[i][0];
        }
        for(int j=1;j<m;j++)
        {
            dp[0][j]=dp[0][j-1]+grid[0][j];
        }
        for(int i=1;i<n;i++)
        {
            for(int j=1;j<m;j++)
            {
                dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
            }
        }
        return dp[n-1][m-1];
        
    }
};
