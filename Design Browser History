class BrowserHistory {
public:
//solving it by using doubly linkedlist
    list<string>history;
    //iterator so that we can iterate over doubly linked list 
    list<string>::iterator it;
    BrowserHistory(string homepage) {
        //iniitially store homepage in history list
        history.push_back(homepage);
        //point it to head/first node of list
        it=history.begin();
    }
    
    void visit(string url) {
        //del is used to delete the previous connection of current node
        auto del = it;
        //increment del so that it can move to next node
        del++;
        //erase all previous connection starting from del
        history.erase(del,history.end());
        //now push new url and increment iterator
        history.push_back(url);
        it++;
        
    }
    
    string back(int steps) {
        //we need to go back given no of steps
        //we also ensure we don't go back beyond the head
        while(it != history.begin() && steps--)
        {
            it--;
        }
        //after going back return the string by dereferencing it
        return *it;
    }
    
    string forward(int steps) {
        while(it != --history.end() && steps--)
        {
            it++;
        }
        return *it;
        
    }
};

/**
 * Your BrowserHistory object will be instantiated and called as such:
 * BrowserHistory* obj = new BrowserHistory(homepage);
 * obj->visit(url);
 * string param_2 = obj->back(steps);
 * string param_3 = obj->forward(steps);
 */
