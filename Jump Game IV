class Solution {
public:
    int minJumps(vector<int>& arr) {
        int n = arr.size();
        unordered_map<int,vector<int>>indices;
        for(int i=0;i<n;i++)
        {
            indices[arr[i]].push_back(i);   //100:[0,4]
        }
        //queue will store the indices of adjacent element
        queue<int>q;
        vector<int>vis(n);//visited will take care wheather the particular index is visited or not

        vis[0]=1;
        q.push(0);
        int step =0;
        while(!q.empty())
        {
            int size = q.size();
            while(size--)
            {
                int curridx=q.front();
                q.pop();

                if(curridx==n-1) return step; //if curridx==n-1 means last index
                //we reach at last indices and return steps

                //explore all possible
                if(curridx+1<n && !vis[curridx+1])  //move forward
                {
                    vis[curridx+1] = 1;
                    q.push(curridx+1);
                }
               if(curridx-1 >= 0 && !vis[curridx-1])  //move backward
                 {
                     vis[curridx-1] =1;
                     q.push(curridx-1);
                 }
                vector<int>&adjacentidx=indices[arr[curridx]]; //move to same valued index
                for(int newidx : adjacentidx)
                {
                    if(!vis[newidx])
                    {
                        vis[newidx]=1;
                        q.push(newidx);
                    }
                }
                adjacentidx.clear();
            }
            step++;
        }
        return -1; //unreachable

        
    }
};
