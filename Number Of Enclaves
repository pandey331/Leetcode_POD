class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        //0=sea cell
        //1=land cell
        int n=grid.size();
        int m=grid[0].size();
        queue<pair<int,int>>q;
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                //first row,first col,last row,last col
              if(i==0 || j==0 || i==n-1 || j==m-1){
                if(grid[i][j]==1)
                {
                    q.push({i,j});
                    vis[i][j]=1;
                }  
              }
            }
        }
        //traverse for all four direction
        int delro[]={-1,0,+1,0};
        int delcol[]={0,+1,0,-1};

        while(!q.empty())
        {
            int row=q.front().first;
            int col=q.front().second;
            q.pop();
            for(int i=0;i<4;i++)
            {
                int nrow=row+delro[i];
                int ncol=col+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m &&!vis[nrow][ncol] && grid[nrow][ncol]==1)
                {
                    q.push({nrow,ncol});
                    vis[nrow][ncol]=1;
                }
            }
        }
        //now aagain traverse to check for land cell that can't go out off boundary
        int count =0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j]==1) count++;
            }
        }
        return count;
       
        
    }
};
